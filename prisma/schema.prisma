generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id         Int          @id @default(autoincrement())
  user_id    Int?
  label      String       @db.VarChar(250)
  postcode   String       @db.VarChar(10)
  street     String       @db.VarChar(100)
  city       String       @db.VarChar(100)
  number     String       @db.VarChar(10)
  delivery   Boolean
  lat        Decimal?     @db.Decimal
  long       Decimal?     @db.Decimal
  name       String?      @db.VarChar(100)
  user       user?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "address_userId_fkey")
  restaurant restaurant[]
}

model category {
  id            Int        @id @default(autoincrement())
  label         String     @db.VarChar(55)
  image_url     String?    @db.VarChar(500)
  restaurant_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamptz(6)
  position      Int?
  active        Boolean    @default(true)
  updated_at    DateTime?  @updatedAt @db.Timestamptz(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  food          food[]

  @@index([restaurant_id], map: "fki_meal_category_restaurantId_fkey")
}

model food {
  id                                      Int             @id @default(autoincrement())
  label                                   String          @db.VarChar(55)
  description                             String?         @db.VarChar(250)
  alone_price                             Int?
  image_url                               String?         @db.VarChar(500)
  category_id                             Int?
  active                                  Boolean         @default(true)
  created_at                              DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                              DateTime?       @updatedAt @db.Timestamptz(6)
  menu_price                              Int?
  additional_price                        Int?
  need_majority                           Boolean         @default(false)
  position                                Int             @default(0)
  menu                                    Boolean         @default(false)
  restaurant_id                           String?         @db.Uuid
  menu_additional_price                   Int?
  nb_element                              Int?
  alone_process_id                        Int?
  menu_process_id                         Int?
  delivery                                Boolean         @default(false)
  click_and_collect                       Boolean         @default(false)
  on_site                                 Boolean         @default(true)
  process_food_alone_process_idToprocess  process?        @relation("food_alone_process_idToprocess", fields: [alone_process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "food_alone_processId_fkey")
  category                                category?       @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "food_categoryId_fkey")
  process_food_menu_process_idToprocess   process?        @relation("food_menu_process_idToprocess", fields: [menu_process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "food_menu_processId_fkey")
  restaurant                              restaurant?     @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "food_restaurantId_fk")
  order_food_order_food_food_idTofood     order_food[]    @relation("order_food_food_idTofood")
  order_food_order_food_ref_food_idTofood order_food[]    @relation("order_food_ref_food_idTofood")
  step_has_food                           step_has_food[]

  @@index([category_id], map: "fki_meal_categoryId_fkey")
}

model message {
  id      Int    @id @default(autoincrement())
  content String @db.VarChar(500)
  user_id Int
  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_userId_fkey")
}

model order {
  id                   Int          @id @default(autoincrement())
  user_id              Int
  restaurant_id        String       @db.Uuid
  delivery             Boolean      @default(false)
  total                Int
  status               Boolean?
  delivered            Boolean?     @default(false)
  created_at           DateTime     @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?    @updatedAt @db.Timestamptz(6)
  approuved            Boolean?
  ready_time           String       @db.VarChar(5)
  comment              String?      @db.VarChar(500)
  on_site              Boolean      @default(false)
  user_time_validation Boolean      @default(false)
  user_cancel          Boolean      @default(false)
  click_and_collect    Boolean      @default(false)
  restaurant           restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_restaurantId_fkey")
  user                 user         @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "order_userId_fkey")
  order_food           order_food[]
}

model order_food {
  id                                Int     @id @default(autoincrement())
  food_id                           Int
  order_id                          Int
  ref_food_id                       Int?
  step_id                           Int?
  menu                              Boolean
  quantity                          Int?
  food_order_food_food_idTofood     food    @relation("order_food_food_idTofood", fields: [food_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_food_foodId_fkey")
  order                             order   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_food_orderId_fkey")
  food_order_food_ref_food_idTofood food?   @relation("order_food_ref_food_idTofood", fields: [ref_food_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_food_ref_foodId_fkey")
  step                              step?   @relation(fields: [step_id], references: [id], onUpdate: NoAction, map: "order_food_stepId_fkey")
}

model process {
  id                                           Int          @id @default(autoincrement())
  label                                        String       @db.VarChar(50)
  restaurant_id                                String       @db.Uuid
  created_at                                   DateTime     @default(now()) @db.Timestamptz(6)
  updated_at                                   DateTime?    @updatedAt @db.Timestamptz(6)
  food_food_alone_process_idToprocess          food[]       @relation("food_alone_process_idToprocess")
  food_food_menu_process_idToprocess           food[]       @relation("food_menu_process_idToprocess")
  restaurant_process_restaurant_idTorestaurant restaurant   @relation("process_restaurant_idTorestaurant", fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "process_resaurantId_fkey")
  restaurant_restaurant_process_idToprocess    restaurant[] @relation("restaurant_process_idToprocess")
  step                                         step[]
}

model restaurant {
  id                                        String     @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password                                  String?    @db.VarChar(250)
  name                                      String     @db.VarChar(55)
  description                               String     @db.VarChar(500)
  address_label                             String?    @db.VarChar(55)
  address_city                              String?    @db.VarChar(55)
  address_cp                                String?    @db.VarChar(55)
  phone                                     String     @db.VarChar(12)
  facebook_link                             String?    @db.VarChar(250)
  delivery                                  Boolean
  delivery_mini_amount                      Int?
  logo_url                                  String?    @db.VarChar(500)
  banner_url                                String?    @db.VarChar(500)
  created_at                                DateTime   @default(now()) @db.Timestamptz(6)
  updated_at                                DateTime?  @updatedAt @db.Timestamptz(6)
  snapchat_link                             String?    @db.VarChar(250)
  instagram_link                            String?    @db.VarChar(250)
  is_open                                   Boolean    @default(false)
  click_and_collect                         Boolean    @default(true)
  on_site                                   Boolean    @default(false)
  user_id                                   Int
  private_mode                              Boolean    @default(false)
  process_id                                Int?
  address_number                            String?    @db.VarChar(10)
  address_id                                Int?
  category                                  category[]
  food                                      food[]
  order                                     order[]
  process_process_restaurant_idTorestaurant process[]  @relation("process_restaurant_idTorestaurant")
  address                                   address?   @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_addressId_fkey")
  process_restaurant_process_idToprocess    process?   @relation("restaurant_process_idToprocess", fields: [process_id], references: [id], onUpdate: NoAction, map: "restaurant_processId_fkey")
  user                                      user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "restaurant_user_id_fk")

  @@index([user_id], map: "fki_restaurant_user_id_fk")
}

model step {
  id            Int             @id @default(autoincrement())
  process_id    Int
  position      Int
  min           Int?
  max           Int?
  depend_size   Boolean         @default(false)
  all_selected  Boolean         @default(false)
  label         String          @db.VarChar(50)
  ref_step_id   Int?
  order_food    order_food[]
  process       process         @relation(fields: [process_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "step_processId_fkey")
  step          step?           @relation("stepTostep", fields: [ref_step_id], references: [id], onUpdate: NoAction, map: "step_ref_stepId_fkey")
  other_step    step[]          @relation("stepTostep")
  step_has_food step_has_food[]
}

model step_has_food {
  id      Int  @id @default(autoincrement())
  step_id Int
  food_id Int
  food    food @relation(fields: [food_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "step_has_food_foodId_fkey")
  step    step @relation(fields: [step_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "step_has_food_stepId_fkey")
}

model subscription {
  id                 Int       @id @default(autoincrement())
  status             String    @db.VarChar(150)
  session_stripe     String    @unique(map: "subscription_session_stripe_unique") @db.VarChar(500)
  sub_id             String?   @unique(map: "subscription_sub_id_unique") @db.VarChar(500)
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  stripe_customer_id String?   @db.VarChar
  user_id            Int
  updated_at         DateTime? @updatedAt @db.Timestamptz(6)
  user               user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_user_id_fk")

  @@index([user_id], map: "fki_subscription_user_id_fk")
}

model subscription_push {
  id               Int       @id @default(autoincrement())
  endpoint         String    @db.VarChar(500)
  p256dh           String    @db.VarChar(200)
  auth             String    @db.VarChar(250)
  content_encoding String?   @db.VarChar(250)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @updatedAt @db.Timestamptz(6)
  user_id          Int
  user             user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscription_push_userId_fkey")

  @@index([user_id], map: "fki_subscription_push_customer_id_fk")
}

model user {
  id                Int                 @id @default(autoincrement())
  email             String              @unique(map: "user_email_unique") @db.VarChar(55)
  password          String?             @db.VarChar(250)
  lastname          String?             @db.VarChar(55)
  firstname         String?             @db.VarChar(55)
  phone             String?             @db.VarChar(12)
  active_account    Boolean             @default(true)
  verified_email    Boolean             @default(false)
  siren             String?             @db.Char(9)
  accept_terms      Boolean             @default(true)
  manual_active     Boolean             @default(false)
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?           @updatedAt @db.Timestamptz(6)
  owner             Boolean             @default(false)
  address           address[]
  message           message[]
  order             order[]
  restaurant        restaurant[]
  subscription      subscription[]
  subscription_push subscription_push[]
}
